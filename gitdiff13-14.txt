diff --git a/firestore.rules b/firestore.rules
index c115a0e..d572db0 100644
--- a/firestore.rules
+++ b/firestore.rules
@@ -7,5 +7,10 @@ service cloud.firestore {
       allow update: if request.auth.uid ==  userId;
       allow delete: if request.auth.uid ==  userId;
     }
+
+    match /products/{productId} {
+      allow read: if request.auth.uid != null;
+      allow write: if  request.auth.uid != null;
+    }
   }
 }
\ No newline at end of file
diff --git a/src/Router.jsx b/src/Router.jsx
index 0cf64e1..1734c85 100644
--- a/src/Router.jsx
+++ b/src/Router.jsx
@@ -1,6 +1,6 @@
 import React from 'react';
 import {Switch, Route} from "react-router";
-import {Reset, SignIn, Home, SignUp} from "./templates";
+import {Reset, ProductEdit, SignIn, Home, SignUp} from "./templates";
 import Auth from './Auth';
 
 const Router = () => {
@@ -11,6 +11,7 @@ const Router = () => {
             <Route exact path={"/signin/reset"} component={Reset} />
             <Auth>
                 <Route exact path={"(/)?"} component={Home} />
+                <Route exact path={"/product/edit"} component={ProductEdit} />
             </Auth>
         </Switch>
     )
diff --git a/src/components/UIkit/SelectBox.jsx b/src/components/UIkit/SelectBox.jsx
new file mode 100644
index 0000000..489c129
--- /dev/null
+++ b/src/components/UIkit/SelectBox.jsx
@@ -0,0 +1,34 @@
+import React from 'react'
+import InputLabel from "@material-ui/core/InputLabel";
+import MenuItem from "@material-ui/core/MenuItem";
+import FormControl from "@material-ui/core/FormControl";
+import Select from "@material-ui/core/Select";
+import {makeStyles} from "@material-ui/styles"
+
+const useStyles = makeStyles({
+    formControl: {
+        marginBottom: 16,
+        minWidth: 128,
+        width: "100%"
+    }
+});
+
+const SelectBox = (props) => {
+    const classes = useStyles();
+
+    return (
+        <FormControl className={classes.formControl}>
+            <InputLabel>{props.label}</InputLabel>
+            <Select
+                required={props.required} value={props.value}
+                onChange={(event) => props.select(event.target.value)}
+            >
+                {props.options.map((option) => (
+                    <MenuItem key={option.id} value={option.id}>{option.name}</MenuItem>
+                ))}
+            </Select>
+        </FormControl>
+    )
+}
+
+export default SelectBox
\ No newline at end of file
diff --git a/src/components/UIkit/index.js b/src/components/UIkit/index.js
index f787844..b00f56b 100644
--- a/src/components/UIkit/index.js
+++ b/src/components/UIkit/index.js
@@ -1,2 +1,3 @@
 export {default as TextInput} from './TextInput'
+export {default as SelectBox} from './SelectBox'
 export {default as PrimaryButton} from './PrimaryButton'
\ No newline at end of file
diff --git a/src/reducks/products/actiions.js b/src/reducks/products/actiions.js
new file mode 100644
index 0000000..e69de29
diff --git a/src/reducks/products/operations.js b/src/reducks/products/operations.js
new file mode 100644
index 0000000..72d3f3e
--- /dev/null
+++ b/src/reducks/products/operations.js
@@ -0,0 +1,31 @@
+import {push} from "connected-react-router";
+import {db, FirebaseTimestamp} from "../../firebase/index"
+
+const productsRef = db.collection('products')
+
+export const saveProduct = (name, description, category, gender, price) => {
+    return async(dispatch) => {
+        const timestamp = FirebaseTimestamp.now()
+
+        const data = {
+            category: category,
+            description: description,
+            gender: gender,
+            name: name,
+            price: parseInt(price, 10),
+            updated_at: timestamp
+        }
+
+        const ref = productsRef.doc();
+        const id = ref.id
+        data.id = id
+        data.created_at = timestamp
+
+        return productsRef.doc(id).set(data)
+            .then(() => {
+                dispatch(push('/'))
+            }).catch((error) => {
+                throw new Error(error)
+            })
+    }
+}
\ No newline at end of file
diff --git a/src/reducks/products/reducers.js b/src/reducks/products/reducers.js
new file mode 100644
index 0000000..ab86889
--- /dev/null
+++ b/src/reducks/products/reducers.js
@@ -0,0 +1,9 @@
+// import * as Actions from './actions'
+import initialState from '../store/initialState'
+
+export const ProductsReducer = (state = initialState.products, action) => {
+    switch (action.type) {
+        default:
+            return state
+    }
+}
\ No newline at end of file
diff --git a/src/reducks/products/selectors.js b/src/reducks/products/selectors.js
new file mode 100644
index 0000000..e69de29
diff --git a/src/reducks/store/initialState.js b/src/reducks/store/initialState.js
index 45553b0..a2a5543 100644
--- a/src/reducks/store/initialState.js
+++ b/src/reducks/store/initialState.js
@@ -1,4 +1,7 @@
 const initialState = {
+    products: {
+        list: []
+    },
     users: {
         isSignedIn: false,
         role: "",
diff --git a/src/reducks/store/store.js b/src/reducks/store/store.js
index 1b54f5f..be96d62 100644
--- a/src/reducks/store/store.js
+++ b/src/reducks/store/store.js
@@ -6,12 +6,14 @@ import {
 import {connectRouter, routerMiddleware} from 'connected-react-router'
 import thunk from 'redux-thunk';
 
+import {ProductsReducer} from "../products/reducers";
 import {UsersReducer} from "../users/reducers";
 
 // 現在どこのページにいるのか？というような情報を持っているのがhistory
 export default function createStore(history) {
     return reduxCreateStore(
         combineReducers({
+            products: ProductsReducer,
             router: connectRouter(history),
             // stateのプロパティ(users)がここでkeyに入ってくる
             users: UsersReducer
diff --git a/src/reducks/users/operations.js b/src/reducks/users/operations.js
index c2a2473..fad8ce5 100644
--- a/src/reducks/users/operations.js
+++ b/src/reducks/users/operations.js
@@ -18,8 +18,6 @@ export const listenAuthState = () => {
                                 uid: uid,
                                 username: data.username
                             }))
-
-                            dispatch(push('/'))
                         })
             } else {
                 dispatch(push('/signin'))
diff --git a/src/templates/Login.jsx b/src/templates/Login.jsx
deleted file mode 100644
index d2fca8d..0000000
--- a/src/templates/Login.jsx
+++ /dev/null
@@ -1,18 +0,0 @@
-import React from 'react';
-import {useDispatch} from "react-redux";
-import { signIn } from '../reducks/users/operations';
-
-
-const Login = () => {
-     const dispatch = useDispatch();
-
-     return (
-         <div>
-             <h2>ログイン</h2>
-             <button onClick={() => dispatch(signIn())}>
-                 ログインする
-             </button>
-         </div>
-     );
-};
-export default Login;
\ No newline at end of file
diff --git a/src/templates/LoginClass.jsx b/src/templates/LoginClass.jsx
deleted file mode 100644
index fe51653..0000000
--- a/src/templates/LoginClass.jsx
+++ /dev/null
@@ -1,15 +0,0 @@
-import React, {Component} from 'react';
-
-export default class LoginClass extends Component {
-    render() {
-        console.log(this.props.users)
-        return (
-            <div>
-                <h2>ログイン</h2>
-                <button onClick={() => this.props.actions.signIn()}>
-                    ログインする
-                </button>
-            </div>
-        );
-    }
-}
\ No newline at end of file
diff --git a/src/templates/ProductEdit.jsx b/src/templates/ProductEdit.jsx
new file mode 100644
index 0000000..db3e4a7
--- /dev/null
+++ b/src/templates/ProductEdit.jsx
@@ -0,0 +1,72 @@
+import React, {useState, useCallback} from 'react'
+import {SelectBox, TextInput, PrimaryButton} from "../components/UIkit";
+import {saveProduct} from "../reducks/products/operations"
+import {useDispatch} from "react-redux";
+const ProductEdit = () => {
+    const dispatch = useDispatch();
+
+    const [name, setName] = useState(""),
+          [description, setDescription] = useState(""),
+          [category, setCategory] = useState([]),
+          [gender, setGender] = useState(""),
+          [price, setPrice] = useState("");
+
+    const inputName = useCallback((event) =>  {
+        setName(event.target.value)
+    }, [setName])
+
+    const inputDescription = useCallback((event) =>  {
+        setDescription(event.target.value)
+    }, [setDescription])
+
+    const inputPrice = useCallback((event) =>  {
+        setPrice(event.target.value)
+    }, [setPrice])
+
+    const categories = [
+        {id: "tops", name: "トップス"},
+        {id: "shirts", name: "シャツ"},
+        {id: "pants", name: "パンツ"}
+    ]
+
+    const genders = [
+        {id: "all", name: "すべて"},
+        {id: "male", name: "メンズ"},
+        {id: "female", name: "レディース"}
+    ]
+
+    return (
+        <section>
+            <h2 className="u-text__headline u-text-center">商品の登録・編集</h2>
+            <div className="c-section-container">
+                <TextInput
+                    fullWidth={true} label={"商品名"} multiline={false} required={true}
+                    onChange={inputName} rows={1}  value={name} type={"text"}
+                />
+                <TextInput
+                    fullWidth={true} label={"商品説明"} multiline={true} required={true}
+                    onChange={inputDescription} rows={5}  value={description} type={"text"}
+                />
+                <SelectBox
+                    label={"カテゴリー"} required={true} options={categories} select={setCategory} value={category}
+                />
+                <SelectBox
+                    label={"性別"} required={true} options={genders} select={setGender} value={gender}
+                />
+                <TextInput
+                    fullWidth={true} label={"価格"} multiline={false} required={true}
+                    onChange={inputPrice} rows={1}  value={price} type={"number"}
+                />
+                <div className="module-spacer--medium" />
+                <div className="center">
+                    <PrimaryButton
+                        label={"商品情報を保存"}
+                        onClick={() => dispatch(saveProduct(name, description, category, gender, price))}
+                    />
+                </div>
+            </div>
+        </section>
+    )
+}
+
+export default ProductEdit
\ No newline at end of file
diff --git a/src/templates/index.js b/src/templates/index.js
index c90bc00..e61056f 100644
--- a/src/templates/index.js
+++ b/src/templates/index.js
@@ -1,5 +1,5 @@
 export {default as Home} from './Home'
-export {default as Login} from './Login'
+export {default as ProductEdit} from './ProductEdit'
 export {default as SignUp} from './SignUp'
 export {default as SignIn} from './SignIn'  
 export {default as Reset} from './Reset'  
\ No newline at end of file
